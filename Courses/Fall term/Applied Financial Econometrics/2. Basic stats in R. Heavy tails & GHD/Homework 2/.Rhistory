install.packages("ghyp")
library(ghyp)
install.packages("ghyp")
install.packages("ghyp")
install.packages("ggplot2")
setwd("~/")
setwd("C:/Applied Financial Econometrics/2. Basic stats in R. Heavy tails & GHD/Homework 2")
install.packages("quantmod")
library(quantmod)
library(ggplot2)
library(ghyp)
library(ggplot2)
library(ghyp)
Sys.setlocale("LC_ALL","English")
##### Loading data #####
tickers = c("SPY") # specify the tickers to load
e <- new.env() # environment where data will be stored
options("getSymbols.warning4.0"=FALSE) # suppress warning about future change in the function behaviour
getSymbols(tickers, src = "yahoo", from="2013-01-01", env=e) # load data from Yahoo Finance
data = do.call(merge, eapply(e, Ad)[tickers]) # merge data into a single xts taking only adjusted prices
names(data) = tickers
##### Calculate returns #####
rets = apply(data, 2, function(x) diff(x)/x[-length(x)])
rets = xts(rets, order.by = index(data)[-1])
##### Density and Q-Q plot #####
dens <- density(rets, bw = "ucv", n = 1024)
df = data.frame(x = dens$x, y = dens$y, Type = "empirical")
df1 = data.frame(x = dens$x, y = dnorm(dens$x, mean = mean(rets), sd = sd(rets)), Type = "theoretical")
df = rbind(df, df1) # merge datasets into a data frame for ggplot
rm(df1)
ggplot(df, aes(x,y, colour = Type)) + geom_line(size = 1) # densitities plot
qqplot(rnorm(n=100^3,mean=mean(rets),sd=sd(rets)), as.numeric(rets),
xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
abline(0,1,lwd=2)
##### Normality tests #####
shapiro.test(as.numeric(rets))
ks.test(as.numeric(as.numeric(rets)), "pnorm", mean = mean(rets), sd = sd(rets))
fit.ghypuv(rets)
fit.ghypuv(rets, symmetric = FALSE, silent = TRUE)
rets.ghyp = fit.ghypuv(rets, symmetric = FALSE, silent = TRUE)
hist(rets.ghyp)
qqghyp(rets.ghyp)
rets.t <- fit.tuv(rets,symmetric=FALSE,silent=TRUE)
lik.ratio.test(rets.ghyp,rets.t,conf.level=0.95)
data(smi.stocks)
sample <- smi.stocks[, "SMI"]
t.symmetric <- fit.tuv(sample, silent = TRUE, symmetric = TRUE)
t.asymmetric <- fit.tuv(sample, silent = TRUE)
lik.ratio.test(t.asymmetric, t.symmetric, conf.level = 0.95)
lik.ratio.test(rets.ghyp,rets.t,conf.level=0.95)
aic.uv <- stepAIC.ghyp(rets,dist=c("gauss","t","ghyp"),
symmetric=NULL,silent=TRUE)
summary(aic.uv$best.model)
summary(aic.uv)
aic.uv <- stepAIC.ghyp(rets,dist=c("ghyp", "hyp", "NIG", "VG", "t", "gauss"),
symmetric=NULL,silent=TRUE)
summary(aic.uv)
aic.uv <- stepAIC.ghyp(rets,dist=c("ghyp", "hyp", "NIG", "VG", "t", "gauss"),
symmetric=NULL,silent=TRUE)
summary(aic.uv)
aic.uv <- stepAIC.ghyp(rets,dist=c("ghyp", "t", "gauss"),
symmetric=NULL,silent=TRUE)
summary(aic.uv)
aic.uv <- stepAIC.ghyp(rets,dist=c"t", "gauss"),
symmetric=NULL,silent=TRUE)
aic.uv <- stepAIC.ghyp(rets,dist=("t", "gauss"),
symmetric=NULL,silent=TRUE)
aic.uv <- stepAIC.ghyp(rets,dist=("t", "gauss"),
symmetric=NULL,silent=TRUE)
aic.uv <- stepAIC.ghyp(rets,dist=("t", "gauss"),symmetric=NULL,silent=TRUE)
aic.uv <- stepAIC.ghyp(rets,dist=c("t", "gauss"),symmetric=NULL,silent=TRUE)
summary(aic.uv)
summary(aic.uv$best.model)
aic.uv <- stepAIC.ghyp(rets,dist=c("ghyp", "hyp", "NIG", "VG", "t", "gauss"),
symmetric=NULL,silent=TRUE)
summary(aic.uv$best.model)
hist(aic.uv$best.model)
qqghyp(aic.uv$best.model)
lik.ratio.test(rets.ghyp,aic.uv$best.model,conf.level=0.95)
VaR <- qghyp(alpha, object=aic.uv$best.model)
alpha <- 0.1
VaR <- qghyp(alpha, object=aic.uv$best.model)
VaR
ES <- mean(dax.sim[1:(alpha*N-1)])
library(datasets)
dax <- EuStockMarkets[,"DAX"]
T <- length(dax) - 1
T
T / 260
1/12
length(data)
alpha <- 0.1; N <- 10^6
alpha <- 0.1; N <- 10^6
rets.sim <- rghyp(n=N,object=aic.uv$best.model)
rets.sim <- sort(rets.sim)
VaR <- dax.sim[alpha*N]
VaR <- rets.sim[alpha*N]
rets.sim[alpha*N]
alpha <- 0.1
VaR <- qghyp(alpha, object=aic.uv$best.model)
VaR
ES <- mean(dax.sim[1:(alpha*N-1)])
ES <- mean(rets.sim[1:(alpha*N-1)])
ES
pghyp(alpha, object=aic.uv$best.model)
pghyp(0, object=aic.uv$best.model)
pghyp(VaR, object=aic.uv$best.model)
rets.sim <- rghyp(n=N,object=aic.uv$best.model)
rets.sim <- sort(rets.sim)
rets.sim[alpha*N]
ES <- mean(rets.sim[1:(alpha*N-1)])
alpha <- 0.1
N <- 10^6
rets.sim <- rghyp(n=N,object=aic.uv$best.model)
rets.sim <- sort(rets.sim)
VaR <- dax.sim[alpha*N]
ES <- mean(rets.sim[1:(alpha*N-1)])
VaR <- rets.sim[alpha*N]
ES <- mean(rets.sim[1:(alpha*N-1)])
VaR
ES
length(rets)
VaR_curve <- numeric()
h <- 0.5 * 260 # window length
for (i in (h+1):length(rets))
{
h.rets <- rets[(i-h):(i-1)]
rets.fit <- stepAIC.ghyp(h.dax,dist=c("ghyp", "hyp", "NIG", "VG", "t", "gauss"),
symmetric=NULL,silent=TRUE)
VaR_curve[i-h] <- qghyp(alpha,object=dax.fit$best.model)
}
VaR_curve <- numeric()
h <- 0.5 * 260 # window length
for (i in (h+1):length(rets))
{
h.rets <- rets[(i-h):(i-1)]
rets.fit <- stepAIC.ghyp(h.rets,dist=c("ghyp", "hyp", "NIG", "VG", "t", "gauss"),
symmetric=NULL,silent=TRUE)
VaR_curve[i-h] <- qghyp(alpha,object=dax.fit$best.model)
}
VaR_curve <- numeric()
h <- 0.5 * 260 # window length
for (i in (h+1):length(rets))
{
h.rets <- rets[(i-h):(i-1)]
rets.fit <- stepAIC.ghyp(h.rets,dist=c("ghyp", "hyp", "NIG", "VG", "t", "gauss"),
symmetric=NULL,silent=TRUE)
VaR_curve[i-h] <- qghyp(alpha,object=rets.fit$best.model)
}
VaR_cruve
VaR_curve
fact <- rets[(h+1):length(rets)]
plot(fact,type="l")
lines(VaR,col="red")
lines(VaR_curve,col="red")
fact <- rets[(h+1):length(rets)]
plot(fact,type="l")
lines(VaR_curve,col="red")
plot(VaR_curve)
fact <- rets[(h+1):length(rets)]
plot(fact,type="l")
length(fact)
length(VaR_cruve)
length(VaR_cure)
length(VaR_curve)
sum(fact<VaR_curve)
plot(as.numeric(fact),type="l")
lines(VaR_curve,col="red")
fact <- rets[(h+1):length(rets)]
plot(as.numeric(fact),type="l")
lines(VaR_curve,col="red")
plot(as.numeric(fact),type="l", ylab = "Return")
lines(VaR_curve,col="red")
K <- sum(fact<VaR_curve); alpha0 <- K/length(rets)
S <- -2*log((1-alpha)^(length(rets)-K)*alpha^K)+
2*log((1-alpha0)^(length(rets)-K)*alpha0^K)
p.value <- 1-pchisq(S,df=1)
p.value
alpha
alpha0
L.Lo <- sum((fact-VaR)^2*(fact<VaR))/K
L.BI <- sum((fact-VaR)/VaR*(fact<VaR))/K
L.Lo
install.packages("Rmarkdown")
install.packages("RMarkdown")
install.packages("rmarkdown")
summary(aic.uv)
summary(aic.uv$best.model)
print(VaR, ES)
print(VaR)
```{r results='hide', message = FALSE, warning = FALSE}
alpha
alpha0
