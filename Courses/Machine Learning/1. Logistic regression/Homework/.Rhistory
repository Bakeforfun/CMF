weightTLT <- 1-weightSPY
config <- Return.portfolio(R = returns, weights=c(weightSPY, weightTLT), rebalance_on = "months")
configs[[i]] <- config
}
configs <- do.call(cbind, configs)
cumRets <- cumprod(1+configs)
period <- 72
roll72CumAnn <- (cumRets/lag(cumRets, period))^(252/period) - 1
roll72SD <- sapply(X = configs, runSD, n=period)*sqrt(252)
sd_f_factor <- 2.5
modSharpe <- roll72CumAnn/roll72SD^sd_f_factor
monthlyModSharpe <- modSharpe[endpoints(modSharpe, on="days"),]
findMax <- function(data) {
return(data==max(data))
}
weights <- t(apply(monthlyModSharpe, 1, findMax))
weights <- weights*1
weights <- xts(weights, order.by=as.Date(rownames(weights)))
weights[is.na(weights)] <- 0
weights$zeroes <- 1-rowSums(weights)
configs$zeroes <- 0
stratRets <- Return.portfolio(R = configs, weights = weights)
rbind(table.AnnualizedReturns(stratRets), maxDrawdown(stratRets))
charts.PerformanceSummary(stratRets)
rbind(table.AnnualizedReturns(stratRets), maxDrawdown(stratRets))
stratAndComponents <- merge(returns, stratRets, join='inner')
charts.PerformanceSummary(stratAndComponents)
rbind(table.AnnualizedReturns(stratAndComponents), maxDrawdown(stratAndComponents))
apply.yearly(stratAndComponents, Return.cumulative)
weightSPY <- apply(monthlyModSharpe, 1, which.max)
weightSPY <- do.call(rbind, weightSPY)
weightSPY <- (weightSPY-1)*.05
align <- cbind(weightSPY, stratRets)
align <- na.locf(align)
chart.TimeSeries(align[,1], date.format="%Y", ylab="Weight SPY", main="Weight of SPY in SPY-TLT pair")
shiny::runApp('RStudio/Quant-master/MA')
shiny::runApp('RStudio/Quant-master/MA')
getOption("encoding")
install.packages("DSTrading")
install.packages("C:\Users\Internet\Documents\Alpha\QuantStrat\DSTrading-master.zip", repos=NULL)
install.packages("~/Alpha/QuantStrat/DSTrading-master.zip", repos = NULL, type = "win.binary")
require(`DSTrading-master`)
require(DSTrading)
install.packages("~/Alpha/QuantStrat/DSTrading.zip", repos = NULL, type = "win.binary")
install.packages("quantstrat")
install.packages("inline")
install.packages("QuantStrat")
install.packages("quantstrat", repos="http://R-Forge.R-project.org")
install.packages("roxygen2")
demo()
error.catching
error.catching()
demo(error.catcching)
demo(error.catching)
demo(is.things)
demo(Hershey)
demo(graphics)
demo(image)
demo(persp)
demo(plotamth)
demo(plotmath)
demo(glm.vr)
demo(lm.glm)
demo(nlm)
demo(smooth)
500000*1.07^10
250000*1.03^7
format(4)
options(digits = 6)
500000*1.07^10
options(digits = 15)
500000*1.07^10
r = 0.07
m
m = 4
100000*(1+r/m)^m
m=12
100000*(1+r/m)^m
100000*exp(r)
(1+r/m)^m
r = 0.0589
m=1
(1+r/m)^m
m=4
(1+r/m)^m
m=12
(1+r/m)^m
exp(0.0589)
r = 0.08
m = 4
(1+r/m)^m -1
m=12
(1+r/m)^m -1
exp(r)-1
(1.07^20-1)/0.07*20000
75000/(1.06^5)
100000/1.07
100000/(1.07/4)^4
100000/(1+ .07/4)^4)
100000/((1+ 0.07/4)^4)
(1-1/(1.05)^10)/0.05*10000
(1-1/(1.05)^10)/0.05*100000
1000/0.03
1061.68/1000-1
5
(1.06168^(1/12)-1)*12
7000*1.05^18
(7/4)^(1/5)
(7/4)^(1/5)-1
(7/4)^(1/4)-1
sqrt(sqrt(2))-1
2^(1/5)
3^(1/5)
setwd("~/")
library("vars")
library("xts")
library("quantmod", lib.loc="~/R/win-library/3.2")
library("ggplot2")
Sys.setenv(TZ='Europe/Moscow')
data = read.csv2("RUB-10min.csv")
Time = strptime(data$Date, "%d.%m.%Y %H:%M")
data = as.xts(data$RUB, order.by = Time)
data = as.xts(data, order.by = Time)
data
data = read.csv2("RUB-10min.csv")
Time = strptime(data$Date, "%d.%m.%Y %H:%M")
Time
Sys.setenv(TZ='Europe/Moscow')
data = read.csv2("RUB-10min.csv")
data
Time = strptime(data$Date, "%d.%m.%y %H:%M")
Time
data = read.csv2("RUB-10min.csv")
Time = strptime(data$Date, "%d.%m.%y %H:%M")
data = as.xts(data, order.by = Time)
data
data = as.xts(data[,c(2,3)], order.by = Time)
data = read.csv2("RUB-10min.csv")
Time = strptime(data$Date, "%d.%m.%y %H:%M")
data = as.xts(data[,c(2,3)], order.by = Time)
вфеф
data
tzone(data) = 'Europe/Moscow'
day = as.numeric(data$Rub)
ret = day / as.numeric(data$Last_price) - 1
ret = ret[-1]
hist(ret, breaks = 50)
ret
head(data)
ret = day / as.numeric(data$Last_close) - 1
ret = ret[-1]
hist(ret, breaks = 50)
data$Last_close
0.25*0.4
109.8/669.5
1-0.164
0.836/0.164
0.78*0.164
275*0.2+250*0.4+200*0.4+190*0.1+180*0.05
12^2
63*63
73*73
83*83+
0
6889+5329+3969+169+144
sqrt(16500)
0.2*0.2
0.2*0.2*144
0.4*0.4*169
0.25*0.25*3969
0.1*0.1*5329
0.05*0.05*6889
144*0.2
.4*169
.25*39693
.25*3969
.1*5329
.05*6889
344.45+532.9+992.25+67.6+28.8
1966^0.5
0.2*275+0.4*250+0.25*200+0.1*190+0.05*180
42*42
17*17
33*33
43*43
53*53
1764*0.2
.4*289
.25*1089
2809*0.05
140.45+184.9+272.25+115.6+352.8
1066^0.5
0.75*0.45
0.75*.55
0.25*.85
.25*.15
.45*0.9+.55*.8
.5*.85+.4*.15
.75*.845+.25*.485
0.409*0.409
0.606*0.606
.635*.635
0.09*0.409*0.606
.1*.409*.635
0.7*0.606*0.635
.7*0.029+0.2*0.021+0.1*0.073
0.7*0.7*0.409*0.409+0.2*0.2*0.606*0.606+0.1*0.1*0.635*0.635
sqrt(0.1006894)
0.7*0.7*0.409*0.409+0.2*0.2*0.606*0.606+0.1*0.1*0.635*0.635+0.7*0.2*2*0.022307+0.2*0.1*2*0.269367+2*0.7*0.1*0.025972
0.1213461^0.5
0.25*30+0.5*15+0.25*10
.25*15+.5*10+.25*5
0.25*12.5*5+5*7.5*0.25
0.55-0.85*0.6
0.04/0.4
0.85*0.6/0.55
(0.6-0.9272727*0.55)/0.45
(0.45-0.2*0.6)/0.4
0.825*0.4/0.45
0.2*0.45/0.6
(0.45-0.15*0.6)/0.4
0.9*0.4/0.45
factorial(3)
factorial(10)/factorial(4)/factorial(6)
(1.058-0.35*0.06)/0.94
getwd()
df=read.csv2(sort.csv)
df=read.csv2("sort.csv")
head(Df)
head(df)
hist(df$Max)
hist(df$Min)
summary(df$Min)
summary(df$Max)
1.058/(0.06*0.35+1-0.06)
0.4*0.6*50000+0.4*0.4*30000+0.6*0.9*80000+0.6*0.1*60000
1/sqrt(40)
install.packages("truncnorm")
library(truncnorm)
ptruncnorm(0)
pnorm(0)
qnorm(0.01)
ptm <- proc.time()
proc.time() - ptm
ptm <- proc.time()
x = rnorm(1000000000)
proc.time() - ptm
ptm <- proc.time()
x = rnorm(100000000)
proc.time() - ptm
ptm <- proc.time()
x = rnorm(100000000)
proc.time() - ptm
?rtruncnorm
ptm <- proc.time()
x = rtruncnorm(100000000, a = -5)
proc.time() - ptm
rm(x)
pnorm(-1)
ptruncnorm(-1, a = -5)
ptruncnorm(-1, a = -4)
ptruncnorm(-1, a = -3)
ptruncnorm(1, a = -3)
pnorm(1)
ptruncnorm(a = -10, b = 10, mean = 9, sigma = 10)
ptruncnorm(0.5, a = -10, b = 10, mean = 9, sigma = 10)
ptruncnorm(0.5, a = -10, b = 10, mean = 9, sd = 10)
ptruncnorm(Inf, a = -10, b = 10, mean = 9, sd = 10)
ptruncnorm(11, a = -10, b = 10, mean = 9, sd = 10)
ptruncnorm(10, a = -10, b = 10, mean = 9, sd = 10)
ptruncnorm(9, a = -10, b = 10, mean = 9, sd = 10)
plot(rtruncnorm(1000, a = -10, b = 10, mean = 9, sd = 10))
plot(dtruncnorm(1000, a = -10, b = 10, mean = 9, sd = 10))
plot(dtruncnorm(-100:100, a = -10, b = 10, mean = 9, sd = 10))
plot(dtruncnorm(1:100, a = -10, b = 10, mean = 9, sd = 10))
plot(dtruncnorm(-10, a = -10, b = 10, mean = 9, sd = 10))
for (i in -20:20) {
plot(dtruncnorm(i, a = -10, b = 10, mean = 9, sd = 10))
}
plot(dtruncnorm(-100, a = -10, b = 10, mean = 9, sd = 10))
for (i in -20:20) {
y=dtruncnorm(i, a = -10, b = 10, mean = 9, sd = 10)
}
-20:20
i = 3
y=dtruncnorm(i, a = -10, b = 10, mean = 9, sd = 10)
i = -20:20
y=dtruncnorm(i[1], a = -10, b = 10, mean = 9, sd = 10)
i[1]
0.1/0.0158
0.05/(0.1*sqrt(101))
0.05/(0.1/sqrt(101))
0.02/(0.09/sqrt(121))
0.1*0.1*100
0.09*0.09*120
+1
0.09*0.09*120+1
1.972/220
sqrt(0.008963636^2/101+0.008963636^2/121)
0.03/sqrt(0.008963636^2/101+0.008963636^2/121)
0.03/sqrt(0.008963636/101+0.008963636/121)
(77.74-42.56)/sqrt(18.06^2/32+24.89^2/189)
(18.06^2/32+24.89^2/189)^2/((18.06^2/32)^2/32+(24.89^2/189)^2/189)
-0.258*sqrt(480)/3.752
-0.64*sqrt(240)/4.096
0.125*sqrt(240)/3.339
9*15*15/400
22.367/15.795
qf(0.025,119,119)
qf(0.975,119,119)
6*7*8*9*10/2/3/4/5
(1+0.05/4)^14*5000
8/12
0.4*0.4*0.0015  + 0.6*0.6*0.0021  +0.4*0.6*sqrt(0.0015)*sqrt(0.0021)*0.35
sqrt(0.001145085)
0.4*0.4*0.0015  + 0.6*0.6*0.0021  +2*0.4*0.6*sqrt(0.0015)*sqrt(0.0021)*0.35
sqrt(0.00129417)
0.4*0.4*0.0015  + 0.6*0.6*0.0021  + 2*0.4*0.6*sqrt(0.0015)*sqrt(0.0021)*0.35
0.75*0.8
0.11*15000
3183.23-0.11*15000
15000-3183.23+0.11*15000
13466.77*0.11
3183.23-1481.345
(1+0.0575/12)^21
(1+0.0575/12)^12
(1+0.057/365)^365
1.0504^(140/365)-1
1.0504^(150/365)-1
5.04*360/150
0.02041283*360/150
1.019^(365/110)
1.9*360/110
0.67+0.5-0.9*0.5
3*0.6*0.8 + 2.5*0.4*0.8 + 1.5*0.7*0.8 + 1 * 0.3*00.2
3*0.6*0.8 + 2.5*0.4*0.8 + 1.5*0.7*0.8 + 1 * 0.3*0.2
3*0.6*0.8 + 2.5*0.4*0.8 + 1.5*0.7*0.2 + 1 * 0.3*0.2
pretty(c(4,55))
install.packages("ghyp")
install.packages("ghyp")
library(ghyp)
install.packages("ghyp")
install.packages("ghyp")
library(ghyp)
install.packages("ghyp")
library(ghyp)
install.packages("ghyp")
install.packages("gplots")
library(ghyp)
library(gplots)
install.packages("gtools")
library(gplots)
install.packages("gdata")
library(gplots)
library(ghyp)
exp(-1)
1/(1+exp(-1))
1/(1+exp(-9999))
1/(1+exp(-9))
1/(1+exp(-0.01))
1/(1+exp(-.01))
1/(1+exp(0.01))
setwd("~/CMF/Courses/Machine Learning/1. Logistic regression/Homework")
A = read.csv("Data/is_spam_train.csv")
head(A)
B = read.csv("Data/mail_features_train.csv")
C = read.csv("Data/mail_features_test.csv")
head(B)
head(C)
head(B)
rm(A,B,C)
##### Loading data #####
y = read.csv("Data/is_spam_train.csv")
X = read.csv("Data/mail_features_train.csv")
X_test = read.csv("Data/mail_features_test.csv")
# исходные данные и их форматы
y <- cbind(y); X <- as.matrix(X)
head(y)
y <- cbind(as.numeric(y)); X <- as.matrix(X)
y = read.csv("Data/is_spam_train.csv")
X = read.csv("Data/mail_features_train.csv")
y <- as.numeric(y); X <- as.matrix(X)
y
as.numeric(y)
str(y)
y = read.csv("Data/is_spam_train.csv", header = FALSE)
y
head(y)
y = read.csv("Data/is_spam_train.csv")
y = read.csv("Data/is_spam_train.csv")
X = read.csv("Data/mail_features_train.csv")
X_test = read.csv("Data/mail_features_test.csv")
# исходные данные и их форматы
y <- as.numeric(y$x); X <- as.matrix(X)
y
length(X$make)
X
tail(X)
X["parts"]
y=cbind(y)
y
y = read.csv("Data/is_spam_train.csv")
X = read.csv("Data/mail_features_train.csv")
X_test = read.csv("Data/mail_features_test.csv")
# исходные данные и их форматы
y <- cbind(as.numeric(y$x)); X <- as.matrix(X)
X <- cbind(1, X) # если в матрице X нет единичного столбца
m <- nrow(X); n <- ncol(X) - 1
##### Logistic function #####
g <- function(z) 1/(1+exp(-z))
J <- function(theta) {
m <- nrow(X)
# вычисление гипотезы ℎ𝜃𝑥
# theta и y — векторы-столбцы, X — матрица
h.theta <- g(X%*%theta)
-t(y)%*%log(h.theta)/m - t(1-y)%*%log(1-h.theta)/m
}
gradJ <- function(theta) {
m <- nrow(X)
t(X)%*%(g(X%*%theta)-y)/m
}
opt <- optim(fn=J, gr=gradJ, par=theta0, method="BFGS")
theta0 <- cbind(rep(0,times=n+1))
theta0 <- cbind(rep(0,times=n+1)) # initial values
opt <- optim(fn=J, gr=gradJ, par=theta0, method="BFGS")
opt
theta <- opt$par; Jval <- opt$value
list(theta=as.vector(theta),J=Jval)
##### Visualise #####
x1 <- c(0,-theta[1]/theta[3])
x2 <- c(-theta[1]/theta[2],0)
lines(x1,x2,type="l",lwd=3)
panel.cor <- function(x, y, digits = 2, cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
# correlation coefficient
r <- cor(x, y)
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste("cor = ", txt, sep = "")
text(0.5, 0.6, txt, cex = 1.5)
# p-value calculation
p <- cor.test(x, y)$p.value
txt2 <- format(c(p, 0.123456789), digits = digits)[1]
txt2 <- paste("p.val = ", txt2, sep = "")
if(p<0.01) txt2 <- paste("p.val ", "< 0.01", sep = "")
text(0.5, 0.4, txt2, cex = 1.5)
}
pairs(X, upper.panel = panel.cor, pch = 16)
abline(x1,x2,type="l",lwd=3)
lines
lines(x1,x2,type="l",lwd=3)
plot.new()
lines(x1,x2,type="l",lwd=3)
head(iris)
qplot(iris$Sepal.Length, iris$Sepal.Width, color = iris$Species, lwd = 5)
qplot(iris$Petal.Length, iris$Petal.Width, color = iris$Species, lwd = 5)
pairs(iris, pch = 16)
qplot(iris$Petal.Length, iris$Petal.Width, color = iris$Species, lwd = 5)
qplot(iris$Sepal.Length, iris$Sepal.Width, color = iris$Species, lwd = 5)
library(ggplot2)
qplot(iris$Sepal.Length, iris$Sepal.Width, color = iris$Species, lwd = 5)
qplot(iris$Petal.Length, iris$Petal.Width, color = iris$Species, lwd = 5)
pairs(iris, pch = 16)
head(X)
summary(X)
str(X)
theta
newy = X %*% theta
newy
plot(newy)
plot(y)
plot(newy)
if (y >= 0) y = 1 else y = 0
y >= 0
y
y = read.csv("Data/is_spam_train.csv")
y <- cbind(as.numeric(y$x)); X <- as.matrix(X)
if (y >= 0) newy = 1 else newy = 0
(y >= 0)
newy[newy >= 0] = 1
newy[newy < 0] = 0
newy
newy = X %*% theta
plot(newy)
newy[newy >= 0] = 1
newy[newy < 0] = 0
newy
plot(newy)
sum(newy)
sum(newy)/m
abs(y-newy)
abs(y-newy)/m
sum(abs(y-newy))/m
y.result <- g(X %*% theta)
y.result
plot(y.result)
opt
y.result <- g(X %*% theta)
y.result <- as.numeric(y.result >= 0.5)
y.result
y.result2 <- X %*% theta
y.result2 <- as.numeric(y.result2 >= 0)
y.result1 <- g(X %*% theta)
y.result1 <- as.numeric(y.result1 >= 0.5)
sum(y.result1 - y.result2)
length(y.result)
rm(y.result1, y.result2)
y.result <- X %*% theta
y.result <- as.numeric(y.result >= 0)
sum(y.result == y)
sum(y.result == y)/m
